<chapter id="libfq-functions">
  <title>libfq functions</title>
  <para>
    This chapter describes &libfq; functions.
  </para>

  <sect1 id="libfq-connect">
    <title>Database Connection Control Functions</title>

    <para>
      The following functions handle connection initiation and
      termination to/from a <productname>Firebird</productname> backend server
    </para>

    <variablelist>

      <varlistentry id="libfq-fqconnect">
        <term>
          <function>FQconnect</function>
          <indexterm><primary>FQconnect</primary></indexterm>
        </term>
        <listitem>
          <para>
            Simple function to create a connection to a Firebird database
            providing only the database path, username and password.
<synopsis>
FBconn * FQconnect(const char *db_path, const char *uname, const char *upass);
</synopsis>
          </para>
        </listitem>

      </varlistentry>

      <varlistentry id="libfq-fqconnectdbparams">
        <term>
          <function>FQconnectdbParams</function>
          <indexterm><primary>FQconnectdbParams</primary></indexterm>
        </term>
        <listitem>
          <para>
         Makes a new connection to the database server.
<synopsis>
FBconn *FQconnectdbParams(const char * const *keywords,
                          const char * const *values);
</synopsis>
          </para>

          <para>
            This function opens a new database connection using the parameters taken
            from two <symbol>NULL</symbol>-terminated arrays. The first,
            <literal>keywords</literal>, is defined as an array of strings, each one
            being a keyword. The second, <literal>values</literal>, gives the value
            for each keyword.
          </para>
          <para>
            Following keywords are currently supported:
          </para>
          <itemizedlist spacing="compact" mark="bullet">
            <listitem>
              <simpara><literal>db_path</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>uname</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>upass</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>client_encoding</literal></simpara>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqfinish">
        <term><function>FQfinish</function><indexterm><primary>FQfinish</primary></indexterm></term>
        <listitem>
          <para>
            Closes the  connection to the server.  Also frees
            memory used by the <structname>FBconn</structname> object.
            Caller must not use the pointer again after <function>FQfinish</function> has been called.
<synopsis>
void FQfinish(FBconn *conn);
</synopsis>
          </para>

        </listitem>
      </varlistentry>
	</variablelist>
  </sect1>

  <sect1 id="libfq-connection-status">
    <title>Database Connection Status Functions</title>
    <para>
      The following functions provide details about an existing connection object.
    </para>

    <variablelist>
      <varlistentry id="libfq-fqstatus">
        <term><function>FQstatus</function><indexterm><primary>FQstatus</primary></indexterm></term>
        <listitem>
          <para>
            Determines whether the provided connection object has an active connection.
<synopsis>
FBconnStatusType FQstatus(const FBconn *conn);
</synopsis>
          </para>
          <para>
            Returns one of:
          </para>

          <itemizedlist spacing="compact" mark="bullet">
            <listitem>
              <simpara><literal>CONNECTION_OK</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>CONNECTION_BAD</literal></simpara>
            </listitem>
          </itemizedlist>

        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqdbpath">
        <term>
          <function>FQdb_path</function>
          <indexterm><primary>FQdb_path</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the path of the database for the current connection.
<synopsis>
   const char *FQdb_path(const FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fquname">
        <term>
          <function>FQuname</function>
          <indexterm><primary>FQuname</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the username for the current connection.
<synopsis>
const char *FQuname(const FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqupass">
        <term>
          <function>FQupass</function>
          <indexterm><primary>FQupass</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the password for the current connection.
<synopsis>
const char *FQupass(const FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqparameterstatus">
        <term>
          <function>FQparameterStatus</function>
          <indexterm><primary>FQparameterStatus</primary></indexterm>
        </term>
        <listitem>
          <para>
            Looks up a current parameter setting of the connection.
<synopsis>
const char *FQparameterStatus(const FBconn *conn, const char *paramName);
</synopsis>
          </para>
          <para>
            Currently the only supported parameter is:
          </para>
          <itemizedlist spacing="compact" mark="bullet">
            <listitem>
              <simpara><literal>client_encoding</literal></simpara>
            </listitem>
          </itemizedlist>
		  <para>
			Other parameters may be added at a future date.
		  </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqclientcodingid">
        <term>
          <function>FQclientEncodingId</function>
          <indexterm><primary>FQclientEncodingId</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the ID of the current client encoding (or -1 if unknown).
<synopsis>
int FQclientEncodingId(FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>



      <varlistentry id="libfq-libversion">
        <term>
          <function>FQlibVersion</function>
          <indexterm><primary>FQlibVersion</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the integer value for the &libfq; version with which
			the current connection is being made.
<synopsis>
int FQlibVersion(void);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-libversionstring">
        <term>
          <function>FQlibVersionString</function>
          <indexterm><primary>FQlibVersionString</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the string value for the &libfq; version with which
			the current connection is being made.
<synopsis>
char *FQlibVersionString(void);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-serverversion">
        <term>
          <function>FQserverVersion</function>
          <indexterm><primary>FQserverVersion</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the server version represented as an integer.
<synopsis>
int FQserverVersion(FBconn *conn);
</synopsis>
          </para>
		  <para>
			The integer is formed by multiplying the server's major version number by 10000,
			the secondary version number by 100 and adding the tertiary version number.
			For example, Firebird 2.5.8 becomes 20508, and Firebird 3.0.3 becomes 30003.
		  </para>
        </listitem>
      </varlistentry>


      <varlistentry id="libfq-fqserverversionstring">
        <term>
          <function>FQserverVersionString</function>
          <indexterm><primary>FQserverVersionString</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the server version in string form.
<synopsis>
char *FQserverVersionString(FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

   </variablelist>

  </sect1>
  <sect1 id="libfq-exec">
	<title>Command Execution Functions</title>

	<para>
	  Once a connection to a database server has been successfully
	  established, the functions described here are used to execute
	  SQL queries and commands, and retrieve the results.
	</para>

	<sect2 id="libfq-exec-main">
	  <title>Main Functions</title>
	  <para>
		<variablelist>
		  <varlistentry id="libfq-fqexec">
			<term>
			  <function>FQexec</function>
			  <indexterm>
				<primary>FQexec</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Submits a command to the server and waits for the result.
				Note that only one query can be provided.
<synopsis>
FBresult *FQexec(FBconn *conn, const char *stmt);
</synopsis>
			  </para>
			  <para>
				Returns a <structname>FBresult</structname> pointer, or NULL when
				no server connection available.
			  </para>
			  <para>
				See <xref linkend="libfq-fqexecparams"> for executing a parameterized
				query.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqexecparams">
			<term>
			  <function>FQexecParams</function>
			  <indexterm>
				<primary>FQexecParams</primary>
			  </indexterm>
			</term>
			<listitem>
			  <para>
				Execute a parameterized query.
			  </para>
			  <para>
				Note that this query's function signature matches that of PostgreSQL's
				<function>PQexecParams()</function>, but not all arguments are currently
				used.
<synopsis>
FBresult *
FQexecParams(FBconn *conn,
			 const char *stmt,
			 int nParams,
			 const int *paramTypes,
			 const char * const *paramValues,
			 const int *paramLengths,
			 const int *paramFormats,
			 int resultFormat);
</synopsis>
			  </para>
			  <para>
				The function arguments are:
				<variablelist>
				  <varlistentry>
					<term><parameter>conn</parameter></term>

					<listitem>
					  <para>
						The connection object to send the command through.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>command</parameter></term>
					<listitem>
					  <para>
						The SQL command string to be executed. If parameters are used,
						they are provided in command string as <literal>?</literal>
						placeholders, which will be replaced sequentially by the provided
						parameter values.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>nParams</parameter></term>
					<listitem>
					  <para>
						The number of parameters supplied; it is the length of the arrays
						<parameter>paramTypes[]</parameter>, <parameter>paramValues[]</parameter>,
						<parameter>paramLengths[]</parameter>, and <parameter>paramFormats[]</parameter>.
					  </para>
					  <para>
						Note: currently this argument is advisory, however it may be used a future release.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramTypes[]</parameter></term>
					<listitem>
					  <para>
						(currently unused)
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramValues[]</parameter></term>
					<listitem>
					  <para>
						Specifies the actual values of the parameters.  A null pointer
						in this array means the corresponding parameter is null;
						otherwise the pointer points to a zero-terminated text string
						(for text format).
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramLengths[]</parameter></term>
					<listitem>
					  <para>
						(currently unused)
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramFormats[]</parameter></term>
					<listitem>
					  <para>
						Optional array to specify whether parameters are passed as
						text strings (array entry is <literal>0</literal>) or a
						text string to be converted to an <literal>RDB$DB_KEY</literal>
						value (array entry is <literal>-1</literal>).
					  </para>
					  <para>
						Binary formats may be supported in the future.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>resultFormat</parameter></term>
					<listitem>
					  <para>
						(currently unused)
					  </para>
					</listitem>
				  </varlistentry>

				</variablelist>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqexectransaction">
			<term>
			  <function>FQexecTransaction</function>
			  <indexterm>
				<primary>FQexecTransaction</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Convenience function to execute a query using the internal
				transaction handle
<synopsis>
FBresult *FQexecTransaction(FBconn *conn, const char *stmt)
</synopsis>
			  </para>
			  <para>
				This is primary useful for client applications which accept
				queries as user input, and need to execute their own internal
				queries without disturbing the user transaction.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqclear">
			<term>
			  <function>FQclear</function>
			  <indexterm>
				<primary>FQclear</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Free the storage attached to an <structname>FBresult</structname> object.
				Never <function>free()</function> the object itself as that will result in
				dangling pointers and memory leaks.
<synopsis>
void FQclear(FBresult *res);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		</variablelist>
	  </para>
	</sect2>

	<sect2 id="libfq-exec-results">
	  <title>Result Handling Functions</title>
	  <para>
		<variablelist>

		  <varlistentry id="libfq-fqresultstatus">
			<term>
			  <function>FQresultStatus</function>
			  <indexterm>
				<primary>FQresultStatus</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns the result status of the previously execute command.
<synopsis>
FQexecStatusType FQresultStatus(const FBresult *res);
</synopsis>
			  </para>
			  <para>
				Following status values are defined:
<programlisting>
	"FBRES_NO_ACTION",
	"FBRES_EMPTY_QUERY",
	"FBRES_COMMAND_OK",
	"FBRES_TUPLES_OK",
	"FBRES_TRANSACTION_START",
	"FBRES_TRANSACTION_COMMIT",
	"FBRES_TRANSACTION_ROLLBACK",
	"FBRES_BAD_RESPONSE",
	"FBRES_NONFATAL_ERROR",
	"FBRES_FATAL_ERROR"</programlisting>
			  </para>
			</listitem>
		  </varlistentry>


		  <varlistentry id="libfq-fqresstatus">
			<term>
			  <function>FQresStatus</function>
			  <indexterm>
				<primary>FQresStatus</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Converts the enumerated type returned by <xref linkend="libfq-fqresultStatus">
				into a string constant describing the status code.
<synopsis>
char *FQresStatus(FQexecStatusType status);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqntuples">
			<term>
			  <function>FQntuples</function>
			  <indexterm>
				<primary>FQntuples</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns the number of tuples (rows) in the provided result.
				If no query has been executed, <literal>-1</literal> is returned.
<synopsis>
int FQntuples(const FBresult *res);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>


		  <varlistentry id="libfq-fqnfields">
			<term>
			  <function>FQnfields</function>
			  <indexterm>
				<primary>FQnfields</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns the number of columns (fields) in the provided result.
				If no query has been executed, <literal>-1</literal> is returned.
<synopsis>
int FQnfields(const FBresult *res);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqgetvalue">
			<term>
			  <function>FQgetvalue</function>
			  <indexterm>
				<primary>FQgetvalue</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns a single field of an <structname>FBresult</structname>.
<synopsis>
char *FQgetvalue(const FBresult *res, int row_number, int column_number);
</synopsis>
			  </para>
			  <para>
				Row and column numbers start at <literal>0</literal>.
			  </para>
			  <note>
				<para>
				  This function will return <literal>NULL</literal> if invalid row/column parameters
				  are provided, as well as when the tuple value is actually <literal>NULL</literal>.
				  To definitively determine if a tuple value is <literal>NULL</literal>,
				  use <xref linkend="libfq-fqgetisnull">.
				</para>
			  </note>
			</listitem>
		  </varlistentry>


		  <varlistentry id="libfq-fqgetisnull">
			<term>
			  <function>FQgetisnull</function>
			  <indexterm>
				<primary>FQgetisnull</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Tests a field for a <literal>NULL</literal> value. Row and column numbers start at 0.
				This function returns <literal>1</literal> if the field is <literal>NULL</literal>
				and <literal>0</literal> if it contains a non-<literal>NULL</literal> value.
<synopsis>
int FQgetisnull(const FBresult *res, int row_number, int column_number);
</synopsis>
			  </para>
			  <para>
				Note that <application>libpq</application>'s <function>PQgetvalue()</function>
				returns an empty string if the field contains a <literal>NULL</literal> value;
				<function>FQgetvalue()</function> returns <literal>NULL</literal>,
				but will also return <literal>NULL</literal> if invalid parameters are provided,
				so <function>FQgetisnull()</function> will provide a definitive result.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqfhasNull">
			<term>
			  <function>FQfhasNull</function>
			  <indexterm>
				<primary>FQfhasNull</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Determine if for the provided column number, the result set contains
				at least one <literal>NULL</literal>.
<synopsis>
bool FQfhasNull(const FBresult *res, int column_number);
</synopsis>
			  </para>
			  <para>
				Not to be confused with <xref linkend="libfq-fqgetisnull">, which determines
				the <literal>NULL</literal> status for the given column of a particular result tuple.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqfmaxwidth">
			<term>
			  <function>FQfmaxwidth</function>
			  <indexterm>
				<primary>FQfmaxwidth</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Provides the maximum width of a column in single character units.
<synopsis>
int FQfmaxwidth(const FBresult *res, int column_number);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqfname">
			<term>
			  <function>FQfname</function>
			  <indexterm>
				<primary>FQfname</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Provides the name (or alias, if set) of a particular field (column).
<synopsis>
char *FQfname(const FBresult *res, int column_number);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>


		  <varlistentry id="libfq-fqgetlength">
			<term>
			  <function>FQgetlength</function>
			  <indexterm>
				<primary>FQgetlength</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Get length in bytes of a particular tuple column.
<synopsis>
int FQgetlength(const FBresult *res, int row_number, int column_number);
</synopsis>
			  </para>
			  <para>
				Row and column numbers start at <literal>0</literal>.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqgetdsplen">
			<term>
			  <function>FQgetdsplen</function>
			  <indexterm>
				<primary>FQgetdsplen</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns the display length in single characters of the specified FBresult field.
<synopsis>
int FQgetdsplen(const FBresult *res, int row_number, int column_number);
</synopsis>
			  </para>
			  <para>
				Row and column numbers start at <literal>0</literal>.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqfformat">
			<term>
			  <function>FQfformat</function>
			  <indexterm>
				<primary>FQfformat</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns the format code indicating the format of the given column.
<synopsis>
short FQfformat(const FBresult *res, int column_number);
</synopsis>
			  </para>
			  <para>
				Following values can be returned:
<programlisting>
   0 - text
   1 - binary
  -1 - invalid column specification</programlisting>
			  </para>
			  <para>
				Column numbers start at <literal>0</literal>.
			  </para>

			</listitem>
		  </varlistentry>


		  <varlistentry id="libfq-fqftype">
			<term>
			  <function>FQftype</function>
			  <indexterm>
				<primary>FQftype</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				 Returns the data type associated with the given column number.

<synopsis>
short FQftype(const FBresult *res, int column_number);
</synopsis>
			  </para>
			  <para>
				The data type will be an integer corresponding to one of the <literal>SQL_*</literal>
				constants defined in <filename>ibase.h</filename> (and repeated in <filename>libfq.h</filename>),
				extended with the following pseudo-types for convenience:
<programlisting>
   - SQL_INVALID_TYPE
   - SQL_DB_KEY</programlisting>
			  </para>
			  <para>
				Column numbers start at <literal>0</literal>.
			  </para>

			</listitem>
		  </varlistentry>

		</variablelist>
	  </para>
	</sect2>

	<sect2 id="libfq-transaction-functions">
	  <title>Transaction Handling Functions</title>
	  <para>
		<variablelist>

		  <varlistentry id="libfq-fqsetautocommit">
			<term>
			  <function>FQsetAutocommit</function>
			  <indexterm>
				<primary>FQsetAutocommit</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Set the connection's autocommit status.
<synopsis>
void FQsetAutocommit(FBconn *conn, bool autocommit);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqstartransaction">
			<term>
			  <function>FQstartTransaction</function>
			  <indexterm>
				<primary>FQstartTransaction</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Start a transaction using the connection's default transaction handle.
				XXX list FQtransactionStatusType
<synopsis>
FQtransactionStatusType FQstartTransaction(FBconn *conn);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqcommittransaction">
			<term>
			  <function>FQcommitTransaction</function>
			  <indexterm>
				<primary>FQcommitTransaction</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Commit a transaction using the connection's default transaction handle.
<synopsis>
FQtransactionStatusType FQcommitTransaction(FBconn *conn);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqrollbacktransaction">
			<term>
			  <function>FQrollbackTransaction</function>
			  <indexterm>
				<primary>FQrollbackTransaction</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Roll back a tranaction using the connection's default transaction handle.
<synopsis>
FQtransactionStatusType FQrollbackTransaction(FBconn *conn);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqisactivetransaction">
			<term>
			  <function>FQisActiveTransaction</function>
			  <indexterm>
				<primary>FQisActiveTransaction</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Indicates whether the provided connection has been marked
				as being in a user-initiated transaction.

<synopsis>
bool FQisActiveTransaction(FBconn *conn);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>


		</variablelist>
	  </para>
	</sect2>


	<sect2 id="libfq-exec-error">
	  <title>Error Handling Functions</title>
	  <para>
		<variablelist>
		  <varlistentry id="libfq-fqerrorMessage">
			<term>
			  <function>FQerrorMessage</function>
			  <indexterm>
				<primary>FQerrorMessage</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				 Returns the most recent error message associated with the result, or an
				 empty string.
<synopsis>
char *FQerrorMessage(const FBconn *conn);
</synopsis>
			  </para>
			  <para>
				<emphasis>not currently implemented!</emphasis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqresulterrormessage">
			<term>
			  <function>FQresultErrorMessage</function>
			  <indexterm>
				<primary>FQresultErrorMessage</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Returns the error message associated with the result, or an empty string.
<synopsis>
char *FQresultErrorMessage(const FBresult *result);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqresulterrorfield">
			<term>
			  <function>FBresultErrorField</function>
			  <indexterm>
				<primary>FBresultErrorField</primary>
			  </indexterm>
			</term>
			<listitem>
			  <para>
				Returns an individual field of an error report, or <literal>NULL</literal>.
<synopsis>
char *FBresultErrorField(const FBresult *res, FQdiagType fieldcode);
</synopsis>
			  </para>
              <para>
                Valid <varname>fieldcode</varname> values are:
              </para>
              <itemizedlist spacing="compact" mark="bullet">
                <listitem>
                  <simpara><literal>FB_DIAG_OTHER</literal></simpara>
                </listitem>
                <listitem>
                  <simpara><literal>FB_DIAG_MESSAGE_PRIMARY</literal></simpara>
                </listitem>
                <listitem>
                  <simpara><literal>FB_DIAG_MESSAGE_DETAIL</literal></simpara>
                </listitem>
                <listitem>
                  <simpara><literal>FB_DIAG_DEBUG</literal></simpara>
                </listitem>

              </itemizedlist>
              <para>
                <literal>FB_DIAG_DEBUG</literal> will not normally be displayed; it will contain
                a message generated by &fbsql; with details about the context where the
                error was encountered.
              </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqresulterrorfieldsasstring">
			<term>
			  <function>FQresultErrorFieldsAsString</function>
			  <indexterm>
				<primary>FQresultErrorFieldsAsString</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Return all error fields formatted as a single, multiline string
<synopsis>
char *FQresultErrorFieldsAsString(const FBresult *res, char *prefix);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqresultdumperrorfields">
			<term>
			  <function>FQresultDumpErrorFields</function>
			  <indexterm>
				<primary>FQresultDumpErrorFields</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				A temporary function to dump the error fields in reverse
				order, until a way can be found of assigning appropriate diagnostic
				codes to each field
<synopsis>
void FQresultDumpErrorFields(FBconn *conn, const FBresult *res);
</synopsis>
			  </para>
			</listitem>
		  </varlistentry>



		</variablelist>
	  </para>
	</sect2>
  </sect1>

</chapter>

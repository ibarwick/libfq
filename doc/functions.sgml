<chapter id="libfq-functions">
  <title>libfq functions</title>
  <para>
    This chapter describes &libfq; functions.
  </para>

  <sect1 id="libfq-connect">
    <title>Database Connection Control Functions</title>

    <para>
      The following functions handle connection initiation and
      termination to/from a <productname>Firebird</productname> backend server
    </para>

    <variablelist>

      <varlistentry id="libfq-fqconnect">
        <term>
          <function>FQconnect</function>
          <indexterm><primary>FQconnect</primary></indexterm>
        </term>
        <listitem>
          <para>
            Simple function to create a connection to a Firebird database
            providing only the database path, username and password.
<synopsis>
FBconn * FQconnect(const char *db_path, const char *uname, const char *upass);
</synopsis>
          </para>
        </listitem>

      </varlistentry>

      <varlistentry id="libfq-fqconnectdbparams">
        <term>
          <function>FQconnectdbParams</function>
          <indexterm><primary>FQconnectdbParams</primary></indexterm>
        </term>
        <listitem>
          <para>
         Makes a new connection to the database server.
<synopsis>
FBconn *FQconnectdbParams(const char * const *keywords,
                          const char * const *values);
</synopsis>
          </para>

          <para>
            This function opens a new database connection using the parameters taken
            from two <symbol>NULL</symbol>-terminated arrays. The first,
            <literal>keywords</literal>, is defined as an array of strings, each one
            being a keyword. The second, <literal>values</literal>, gives the value
            for each keyword.
          </para>
          <para>
            Following keywords are currently supported:
          </para>
          <itemizedlist spacing="compact" mark="bullet">
            <listitem>
              <simpara><literal>db_path</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>uname</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>upass</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>client_encoding</literal></simpara>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqfinish">
        <term><function>FQfinish</function><indexterm><primary>FQfinish</primary></indexterm></term>
        <listitem>
          <para>
            Closes the  connection to the server.  Also frees
            memory used by the <structname>FBconn</structname> object.
            Caller must not use the pointer again after <function>FQfinish</function> has been called.
<synopsis>
void FQfinish(FBconn *conn);
</synopsis>
          </para>

        </listitem>
      </varlistentry>
	</variablelist>
  </sect1>

  <sect1 id="libfq-connection-status">
    <title>Database Connection Status Functions</title>
    <para>
      The following functions provide details about an existing connection object.
    </para>

    <variablelist>
      <varlistentry id="libfq-fqstatus">
        <term><function>FQstatus</function><indexterm><primary>FQstatus</primary></indexterm></term>
        <listitem>
          <para>
            Determines whether the provided connection object has an active connection.
<synopsis>
FBconnStatusType FQstatus(const FBconn *conn);
</synopsis>
          </para>
          <para>
            Returns one of:
          </para>

          <itemizedlist spacing="compact" mark="bullet">
            <listitem>
              <simpara><literal>CONNECTION_OK</literal></simpara>
            </listitem>
            <listitem>
              <simpara><literal>CONNECTION_BAD</literal></simpara>
            </listitem>
          </itemizedlist>

        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqdbpath">
        <term>
          <function>FQdb_path</function>
          <indexterm><primary>FQdb_path</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the path of the database for the current connection.
<synopsis>
   const char *FQdb_path(const FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fquname">
        <term>
          <function>FQuname</function>
          <indexterm><primary>FQuname</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the username for the current connection.
<synopsis>
const char *FQuname(const FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqupass">
        <term>
          <function>FQupass</function>
          <indexterm><primary>FQupass</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the password for the current connection.
<synopsis>
const char *FQupass(const FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqparameterstatus">
        <term>
          <function>FQparameterStatus</function>
          <indexterm><primary>FQparameterStatus</primary></indexterm>
        </term>
        <listitem>
          <para>
            Looks up a current parameter setting of the connection.
<synopsis>
const char *FQparameterStatus(const FBconn *conn, const char *paramName);
</synopsis>
          </para>
          <para>
            Currently the only supported parameter is:
          </para>
          <itemizedlist spacing="compact" mark="bullet">
            <listitem>
              <simpara><literal>client_encoding</literal></simpara>
            </listitem>
          </itemizedlist>
		  <para>
			Other parameters may be added at a future date.
		  </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-fqclientcodingid">
        <term>
          <function>FQclientEncodingId</function>
          <indexterm><primary>FQclientEncodingId</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the ID of the current client encoding (or -1 if unknown).
<synopsis>
int FQclientEncodingId(FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>



      <varlistentry id="libfq-libversion">
        <term>
          <function>FQlibVersion</function>
          <indexterm><primary>FQlibVersion</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the integer value for the &libfq; version with which
			the current connection is being made.
<synopsis>
int FQlibVersion(void);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-libversionstring">
        <term>
          <function>FQlibVersionString</function>
          <indexterm><primary>FQlibVersionString</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the string value for the &libfq; version with which
			the current connection is being made.
<synopsis>
char *FQlibVersionString(void);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry id="libfq-serverversion">
        <term>
          <function>FQserverVersion</function>
          <indexterm><primary>FQserverVersion</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the server version represented as an integer.
<synopsis>
int FQserverVersion(FBconn *conn);
</synopsis>
          </para>
		  <para>
			The integer is formed by multiplying the server's major version number by 10000,
			the secondary version number by 100 and adding the tertiary version number.
			For example, Firebird 2.5.8 becomes 20508, and Firebird 3.0.3 becomes 30003.
		  </para>
        </listitem>
      </varlistentry>


      <varlistentry id="libfq-fqserverversionstring">
        <term>
          <function>FQserverVersionString</function>
          <indexterm><primary>FQserverVersionString</primary></indexterm>
        </term>
        <listitem>
          <para>
			Returns the server version in string form.
<synopsis>
char *FQserverVersionString(FBconn *conn);
</synopsis>
          </para>
        </listitem>
      </varlistentry>

   </variablelist>

  </sect1>
  <sect1 id="libfq-exec">
	<title>Command Execution Functions</title>

	<para>
	  Once a connection to a database server has been successfully
	  established, the functions described here are used to execute
	  SQL queries and commands, and retrieve the results.
	</para>

	<sect2 id="libfq-exec-main">
	  <title>Main Functions</title>
	  <para>
		<variablelist>
		  <varlistentry id="libfq-fqexec">
			<term>
			  <function>FQexec</function>
			  <indexterm>
				<primary>FQexec</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Submits a command to the server and waits for the result.
				Note that only one query can be provided.
<synopsis>
FQresult *FQexec(FBconn *conn, const char *stmt);
</synopsis>
			  </para>
			  <para>
				Returns a <structname>FQresult</structname> pointer, or NULL when
				no server connection available.
			  </para>
			  <para>
				See <xref linkend="libfq-fqexecparams"> for executing a parameterized
				query.
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqexecparams">
			<term>
			  <function>FQexecParams</function>
			  <indexterm>
				<primary>FQexecParams</primary>
			  </indexterm>
			</term>
			<listitem>
			  <para>
				Execute a parameterized query.
			  </para>
			  <para>
				Note that this query's function signature matches that of PostgreSQL's
				<function>PQexecParams()</function>, but not all arguments are currently
				used.
<synopsis>
FQresult *
FQexecParams(FBconn *conn,
			 const char *stmt,
			 int nParams,
			 const int *paramTypes,
			 const char * const *paramValues,
			 const int *paramLengths,
			 const int *paramFormats,
			 int resultFormat);
</synopsis>
			  </para>
			  <para>
				The function arguments are:
				<variablelist>
				  <varlistentry>
					<term><parameter>conn</parameter></term>

					<listitem>
					  <para>
						The connection object to send the command through.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>command</parameter></term>
					<listitem>
					  <para>
						The SQL command string to be executed. If parameters are used,
						they are provided in command string as <literal>?</literal>
						placeholders, which will be replaced sequentially by the provided
						parameter values.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>nParams</parameter></term>
					<listitem>
					  <para>
						The number of parameters supplied; it is the length of the arrays
						<parameter>paramTypes[]</parameter>, <parameter>paramValues[]</parameter>,
						<parameter>paramLengths[]</parameter>, and <parameter>paramFormats[]</parameter>.
					  </para>
					  <para>
						Note: currently this argument is advisory, however it may be used a future release.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramTypes[]</parameter></term>
					<listitem>
					  <para>
						(currently unused)
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramValues[]</parameter></term>
					<listitem>
					  <para>
						Specifies the actual values of the parameters.  A null pointer
						in this array means the corresponding parameter is null;
						otherwise the pointer points to a zero-terminated text string
						(for text format).
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramLengths[]</parameter></term>
					<listitem>
					  <para>
						(currently unused)
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>paramFormats[]</parameter></term>
					<listitem>
					  <para>
						Optional array to specify whether parameters are passed as
						text strings (array entry is <literal>0</literal>) or a
						text string to be converted to an <literal>RDB$DB_KEY</literal>
						value (array entry is <literal>-1</literal>).
					  </para>
					  <para>
						Binary formats may be supported in the future.
					  </para>
					</listitem>
				  </varlistentry>

				  <varlistentry>
					<term><parameter>resultFormat</parameter></term>
					<listitem>
					  <para>
						(currently unused)
					  </para>
					</listitem>
				  </varlistentry>

				</variablelist>
			  </para>
			</listitem>
		  </varlistentry>

		  <varlistentry id="libfq-fqexectransaction">
			<term>
			  <function>FQexecTransaction</function>
			  <indexterm>
				<primary>FQexecTransaction</primary>
			  </indexterm>
			</term>

			<listitem>
			  <para>
				Convenience function to execute a query using the internal
				transaction handle
<synopsis>
FQresult *FQexecTransaction(FBconn *conn, const char *stmt)
</synopsis>
			  </para>
			  <para>
				This is primary useful for client applications which accept
				queries as user input, and need to execute their own internal
				queries without disturbing the user transaction.
			  </para>
			</listitem>
		</variablelist>
	  </para>
	</sect2>
  </sect1>

</chapter>
